immediate
    - Account should be change to google account circle - tbd - optional
        - after login page is done
    - responsive for smaller computer screen and phone screen (basic responsive design) - tbd - optional
        - after app is done
    - the highlight for the search bar creates an issue
        - when mousedown mouseup is used the hitbox is 100 px below the search bar as well
        - when fixed using the fix in index.js
    - the onclick for the menu causes issues
        - when onclick is done for menu logo the onhover interaction closes the menu
            - unwanted interaction
    - the onclick target for the unclicked notepad is smaller than needed 
        - throw in a div and change other css accordingly to get a clickable that encompasses the area
    - rename functions in eventlisteners
    - eventlisteners to add in later
        - highlight on click (search)
        - hover over side menu show which does not remove side menu click action from header image
    - setup localhost- done
        - login, logout, sign-up, notes, reminders, labels, archive, trash
    - notes page - tbd - immediate
        - delete function - optional
            - location of cursor function - optional
        - maintain length of text - tbd - immediate
            - the counters need to be global values because js handles memory addressing on its own with 
            out allowing for the developer to change the value stored at a certain address passing changing 
            values from different local scopes is an issue and will not change the value itself
            - counter used instead
                - this counter limit needs to account for different width of characters - tbd - optional
                - a char map needs to be created of each char st each char wont exceed the max
                length of the text. note that standard was set for a row of a's in lowercase
                    - this could be simplified if the width of the pre tag adjusts to the 
                    length of the text in it but isnt possible in js
                    - most letters are the same width except m and w the two of which have similar sizes
                    - single digits all have similar width however are smaller than the smallest letter
        - maintain height of text - done
            - add in scroll wheel if lines exceed two - optional
        - level sidemenu to be halfway between the page - tbd - optional
    - migrate sidemenu and navbar js to index.js file, migrate html css as well to index - tbd - immediate
        - use python methods to incorporate the code
        - index.html
        - index.css
        - index.js
    - remove main_navbar_header and replace with main_navbar - tbd - immediate
    - finish flask app - tbd - immediate
    - responsive notes - tbd - immediate
        - for nav and sidemenu use containers to be a percent of the width
        - child tags will be placed based off of the parent tags
        - if the width of the device is different use a different size function
    - navigation changes - tbd - immediate
        - when page is navigated to different page change the value of the settings menu boolean
        - if the page is refreshed or if the page revisited with backspace the menu is hidden as a default
    - remove unessecary comments (how do you spell unessecary) - tbd - immediate
    - organize notes text file - tbd - immediate
    - highlight more options on note page - tbd - optional
        - add eventlisteners for more options p tags
    - auto close sidemenu - tbd - optional
        - when you click outside the side menu
    - prevent page reload - done
        - prevent page reload when sidemenu item is already loaded
        - prevent page reload when settings menu item or about item is already loaded
    - log out of account - tbd - immediate
        - if user logs out or clicks on signup/login automatically remove the login credentials
        - store log in credentials in python and pass to js/html 

    - refactor js (2) - tbd - immediate
        - `${x}px` put variables in that format for HTML DOM
        - tested it out didnt work needs further testing
    - reminders page - tbd - optional
    - labels page - tbd - optional
    - archive page - tbd - optional
    - trash page - tbd - optional
    - about page - optional
    - account page - optional
    - sign in page - done
    - sign out page - done
    - log in page - done
    - home page - done
        - login/sign up
    - responsive web design (3) - tbd - final
        - large screen, min screen and mobile
    - finish python (1) - tbd - immediate
        - init file
        - logout message if login, logout or signup page is opened
        - if logged out have a global python variable that is true
            - once logged in the python variable is false
            - if variable if true then the notes, reminders, labels, archive or trash page will typed into urls
            will lead to the home page with home page url


form handling
    - in terminal
        - pip install requests
        - pip install requests bs4 (beautiful soup 4)
    - difference between get and post methods
        - In HTML forms, the POST and GET methods are two ways to send data to a server. They have distinct characteristics and use cases:
        - GET Method
            Data Sent in URL: Data is appended to the URL as query parameters. For example: http://example.com/form?name=John&age=30.
            Visibility: The data is visible in the URL, making it less secure for sensitive information.
            Length: Limited by the maximum URL length (generally around 2000 characters).
            Caching: Requests can be cached by browsers and stored in browser history.
            Use Case: Typically used for retrieving data from the server without side effects. Suitable for form submissions where data retrieval is required, like search forms.
        - POST Method
            Data Sent in Body: Data is sent in the body of the HTTP request, not visible in the URL.
            Security: More secure for transmitting sensitive information, like passwords, though it still requires HTTPS for complete security.
            Length: No restrictions on the amount of data sent.
            Caching: Requests are not cached by browsers.
            Use Case: Used for sending data to the server to create or update resources. Suitable for form submissions involving sensitive data or large amounts of data.

databases            
    - when creating db in shell
        >>> from main import app, db
        >>> with app.app_context():
        ...     db.create_all()
        ...
    - to view the database check db browser application
    - Why you can't return nothing in a flask app route
        In a Flask application, every route handler function (also known as a view function) is required to return a valid HTTP response. This means that the function should return 
        a value that can be interpreted as a response by the Flask framework, such as:

        A string representing the response body
        A Flask Response object
        A call to a helper function like jsonify or render_template that returns a valid response
        Returning None from a view function, either explicitly or implicitly, is not considered a valid HTTP response in Flask, hence the TypeError. In your specific case, when the 
        login is successful, the function is not returning any response, which leads to the error.

side note
    - currently working on the notes page
    - add what buttons do not work or are under construction
    - for keycodes other than entering values there needs to be a function for said action
        - start with what is in commments
    - throw comments in code before functions, variable sections etc (section based)
    - for spacebar function when there is no text no space is added - done
        - basic functionality of strings in js (treated like null or zero)
        - easy fix
    - keylogger eventlistener
        - spacebar sets next character as caps
    - edit backspace to delete enters
    - issue with keyloggers is that parsing the functions changes with entry and title - done
        - easy refactor into one function