daily housekeeping
    - organize notes text file
    - refactor code
        - `${x}px` put variables in that format for HTML DOM
            - tested it out didnt work needs further testing

finished
    - setup basic localhost - done
        - login, logout, sign-up, notes, reminders, labels, archive, trash
    - add in pin image - done
        - forgot to add in pin image for pin note functionality
    - update note slips fix - done
        - notes get shifted to the right after deleted note update
    - migrate sidemenu and navbar js to index.js file, migrate html css as well to index - done
        - use python methods to incorporate the code - done
        - account - done
            - index_account.html - done
            - index_account.css - done
            - index_account.js - done
        - user - done
            - index_user.html - done
            - index_user.css - done
            - index_user.js - done
    - sign in page - done
    - sign out page - done
    - log in page - done
    - home page - done
        - login/sign up
    - prevent page reload - done
        - prevent page reload when sidemenu item is already loaded - done
        - prevent page reload when settings/about menu item or about item is already loaded - done
            - account handling - done
            - if there are two accounts
                - logging in with a new account loads no notes properly with errors
                - errors on load
                    - logged_in:201 Uncaught 
                        TypeError: Cannot read properties of undefined (reading 'replace')
                        at logged_in:201:53
                        at Array.forEach (<anonymous>)
                        at logged_in:199:43
                        at Array.map (<anonymous>)
                        at convertToArray (logged_in:193:56)
                        at logged_in:209:23
                    - notes.js:857 Uncaught 
                        ReferenceError: notesRead is not defined
                        at drawNotesOnLoad (notes.js:857:23)
                        at window.onload (notes.js:875:5)
                - errors with adding a note
                    - notes.js:505 Uncaught 
                        ReferenceError: totalNotes is not defined
                        at HTMLParagraphElement.handleMouseDownEventForEntryBox (notes.js:505:46)
        - application can now handle multiple accounts and new accounts with no notes

optional
    - Account should be change to google account circle - tbd - optional
        - after login page is done
    - search bar eventlistener - tbd - optional
        - the highlight for the search bar creates an issue
        - when mousedown mouseup is used the hitbox is 100 px below the search bar as well
            - could be using the wrong ID
        - when fixed using the fix in index.js
    - side menu eventlistener - tbd - optional
        - the onclick for the menu causes issues
        - when onclick is done for menu logo the onhover interaction closes the menu
            - unwanted interaction
        - when you click on anythin outside the sidemenu close the sidemenu
    - open notepad eventlistener - tbd - optional
        - the onclick target for the unclicked notepad is smaller than needed
        - throw in a div and change other css accordingly to get a clickable that encompasses the area
    - highlight more options on note page - tbd - optional
        - add eventlisteners for more options p tags
    - under construction sign - tbd - optional
        - labels page - tbd - optional
        - archive page - tbd - optional
        - trash page - tbd - optional
        - about page - optional
        - account page - optional

immediate
    - notes page - tbd - immediate
        - delete function - done
        - maintain length of text - done
        - counter char map - tbd - immediate
            - this counter limit needs to account for different width of characters 
            - a char map needs to be created of each char st each char wont exceed the max
            length of the text. note that standard was set for a row of a's in lowercase
                - this could be simplified if the width of the pre tag adjusts to the 
                length of the text in it but isnt possible in js
                - most letters are the same width except m and w the two of which have similar sizes
                - single digits all have similar width however are smaller than the smallest letter
        - maintain height of text - done
        - add in scroll wheel if lines exceed two - tbd - optional
            - notepad and notes
            - custom scroll bar for notes
                - max 200 notes
                - height of notepad viewport
                - after the text exceeds the character limit of the textbox show scroll wheel for note
                - ignore new line characters and connect the string together in notes
        - parse function - tbd - immediate
            - bug test keylogger
            - keylogger deosnt refresh string on occasion
            - keylogger permanently keeps shift/capslock case on occasion
    - remove main_navbar_header and replace with main_navbar - tbd - immediate
    - finish flask app - tbd - immediate
    - responsive - tbd - immediate
        - wait till app functionality is finished
        - large screen, min screen and mobile
        - for nav and sidemenu use containers to be a percent of the width
        - child tags will be placed based off of the parent tags
        - if the width of the device is different use a different size function
    - navigation changes - tbd - immediate
        - when page is navigated to different page change the value of the settings menu boolean
        - if the page is refreshed the menu is hidden as a default
    - remove unnecessary comments - tbd - immediate
    - auto close sidemenu - tbd - optional
        - when you click outside the side menu
    - log out of account - tbd - immediate
        - if user logs out or clicks on signup/login automatically remove the login credentials
        - store log in credentials in python and pass to js/html 
    - reminders page - tbd - optional
    - finish python - tbd - immediate
        - init file
        - logout message if login, logout or signup page is opened
        - if logged out have a global python variable that is true
            - once logged in the python variable is false
            - if variable if true then the notes, reminders, labels, archive or trash page when typed into urls
            will lead to the home page with home page url
    - rename functions in eventlisteners - tbd - immediate

form handling notes
    - python (flask app), HTML/CSS/JavaScript
    - in terminal
        - >>> pip install requests
        - >>> pip install requests bs4 
            - (beautiful soup 4)
    - difference between get and post methods
        - In HTML forms, the POST and GET methods are two ways to send data to a server. They have distinct characteristics and use cases:
        - GET Method
            Data Sent in URL: Data is appended to the URL as query parameters. For example: http://example.com/form?name=John&age=30.
            Visibility: The data is visible in the URL, making it less secure for sensitive information.
            Length: Limited by the maximum URL length (generally around 2000 characters).
            Caching: Requests can be cached by browsers and stored in browser history.
            Use Case: Typically used for retrieving data from the server without side effects. Suitable for form submissions where data retrieval is required, like search forms.
        - POST Method
            Data Sent in Body: Data is sent in the body of the HTTP request, not visible in the URL.
            Security: More secure for transmitting sensitive information, like passwords, though it still requires HTTPS for complete security.
            Length: No restrictions on the amount of data sent.
            Caching: Requests are not cached by browsers.
            Use Case: Used for sending data to the server to create or update resources. Suitable for form submissions involving sensitive data or large amounts of data.

databases            
    - when creating db in shell
        >>> from main import app, db
        >>> with app.app_context():
        ...     db.create_all()
        ...
    - to view the database check db browser application
    - Why you can't return nothing in a flask app route
        In a Flask application, every route handler function (also known as a view function) is required to return a valid HTTP response. This means that the function should return 
        a value that can be interpreted as a response by the Flask framework, such as:

        A string representing the response body
        A Flask Response object
        A call to a helper function like jsonify or render_template that returns a valid response
        Returning None from a view function, either explicitly or implicitly, is not considered a valid HTTP response in Flask, hence the TypeError. In your specific case, when the 
        login is successful, the function is not returning any response, which leads to the error.

side note
    - currently working on the notes page
    - add what buttons do not work or are under construction
    - for keycodes other than entering values there needs to be a function for said action
        - start with what is in commments
    - throw comments in code before functions, variable sections etc (section based)
    - for spacebar function when there is no text no space is added - done
        - basic functionality of strings in js (treated like null or zero)
        - easy fix
    - keylogger eventlistener
        - spacebar sets next character as caps
    - edit backspace to delete enters
    - issue with keyloggers is that parsing the functions changes with entry and title - done
        - easy refactor into one function

old convert to array function
    function convertToArray(str) {
        // Remove the surrounding square brackets and split by the object boundaries
        const objects = str.slice(1, -1).split('}, {').map(item => {
            // Add curly braces back to each string to form valid object-like structures
            item = item.replace(/^{?/, '{').replace(/}?$/, '}');
            console.log(item);
            // Split the key-value pairs and create an object
            const obj = {};
            item.slice(1, -1).split(', ').forEach(pair => {
                const [key, value] = pair.split(': ');
                obj[key.replace(/\"/g, '')] = value.replace(/\"/g, '');
            });
            console.log(obj);
            return obj;
            console.log(obj);
        });
        return objects;
    }